#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           SWEAR DETECTION
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#

options:
    package: false #set true if dependant on a chat system
    prev: 30

on Skript start:
    wait 5 ticks
    load yaml "plugins/Skript/yaml/swear.yml" as "swear"

    swearList()
    delete {doc::*}


on quit:
    clear metadata value "swearWRD" of player
    clear metadata value "swearCAT" of player
    clear metadata value "msg" of player


#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           Functions
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#

#TODO: Add first letter indexes to loop through
#TODO: Replace swear word with ****


function swearList():
    set {_f} to "swear-doc"
    set {_d1} to "swearlist"
    set {_d2} to "swearlistdev"
    set {_h} to "head"
    set {_h2} to "subhead"
    set {_b} to "body"
    deleteDoc("swear-doc")
    loop yaml node keys "words" from "swear":
        set {_count} to {_count} + 1
    createDoc({_f}, {_d1}, {_h}, "&4&m------------------------------")
    createDoc({_f}, {_d1}, {_h}, "&c&lSwear List &7[%{_count}%]")
    createDoc({_f}, {_d1}, {_h}, " ")
    createDoc({_f}, {_d2}, {_h}, "&4&m------------------------------")
    createDoc({_f}, {_d2}, {_h}, "&c&lSwear &e&lDevList &7[%{_count}%]")

    createDoc({_f}, {_d2}, {_h}, " ")
    loop yaml node keys "words" from "swear":
        set {_val::*} to split yaml value "words.%loop-val%" from "swear" at " "
        
        createDoc({_f}, {_d1}, {_h2}, " &4&l%{_val::1}%", "body") if {_val::1} is not {_prev}
        createDoc({_f}, {_d2}, {_h2}, " &4&l%{_val::1}%", "body") if {_val::1} is not {_prev}
        createDoc({_f}, {_d1}, {_b}, " &4&l> &r%loop-val%")


        if loop-val matches {_x}:
            createDoc({_f}, {_d2}, {_b}, " &2&l✔ &r%loop-val% &8▪ &e%{_val::2}%")
        else:
            createDoc({_f}, {_d2}, {_b}, " &4&l❌ &c%loop-val% &8▪ &e%{_val::2}%")
        
        set {_prev} to {_val::1}
    save yaml "swear-doc"


function swearCheck(p: player, t: text):
    loop yaml node keys "words" from "swear":
        set {_x} to yaml value "words.%loop-val%" from "swear"
        set {_x::*} to split {_x} at " "
        if {_t} matches {_x::2}:
            set metadata value "swearWRD" of {_p} to loop-val # Detected Word
            set metadata value "swearCAT" of {_p} to {_x::1}
            set metadata value "msg" of {_p} to {_t} # Message
 
            stop loop

            #==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           EVENTS
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#


on chat:
    {@package} is false
    clear metadata value "swearWRD" of player
    swearCheck(player, message)
    if metadata value "swearWRD" of player is set:
        set {_s::*} to snitch("notify.swear.attempt")
        set {_cat} to metadata value "swearCAT" of player
        set {_wrd} to metadata value "swearWRD" of player

        set {_prev} to message
        set {_prev} to "|%first {@prev} characters of {_prev}%...$h%message%|" if length of message > {@prev}
        tellraw("&c⚠ &7Msg blocked &f%player% &7for &c%{_cat}% &7found &c%{_wrd}% &7in &f%{_prev}%", {_s::*})
        tellraw(yaml value "message.%{_cat}%" of "swear", player)
        send " "
        
        log "%now% %player%: %{_cat}% %{_wrd}% > %message%" to "filter.log"
        cancel event


#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           COMMAND
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#


command /swear [<text>] [<text>]:
    description: player reports any false positives made by swear filter
    usage: /swear report
    executable by: players
    #cooldown: 1 seconds
    #cooldown message: &cPlease wait before you execute that command!
    trigger:
        

    #NOTE: REPORT COMMAND - writes .log
    if arg 1 is "report":
        if metadata value "swearWRD" of player is set:
            set {_d::*} to snitch("notify.swear.debug")
            set {_wrd} to metadata value "swearWRD" of player
            set {_cat} to metadata value "swearCAT" of player
            set {_msg} to metadata value "msg" of player
            
            set {_prev} to {_msg}
            set {_prev} to "|%first {@prev} characters of {_prev}%...$h%{_msg}%|" if length of {_msg} > {@prev}
            tellraw("&e⚡ &7 Bug Report &f%player% &7for &c%{_cat}% &7found &c%{_wrd}% &7in &f%{_prev}%", {_d::*})
            log "%now% %player%: %{_cat}% %{_wrd}% > %{_msg}%" to "report/filter.log"
            send "&aMessage was logged for review"
            clear metadata value "swearWRD" of player
        else:
            send "&cThere is nothing to report at this moment"
    

    else if player has permissions "staff":
            #NOTE: Help
            if arg 1 is "help":
                readDoc("swear", "help", player, "swear help", arg 2)
            else if arg 1 is not set:
                readDoc("swear", "help", player, "swear help", arg 2)


            #NOTE: CHECK COMMAND - check phrase in swear function
            else if arg 1 is "check":
                if arg 2 is set:
                    clear metadata value "swearWRD" of player
                    swearCheck(player, arg 2)
                    if metadata value "swearWRD" of player is set:
                        set {_wrd} to metadata value "swearWRD" of player
                        send "&cCannot send! Found &f%{_wrd}% &cin &f%arg 2%"
                    else:
                        send "&aCan send! &r&f%arg 2%"
                else:
                    sendError(player, "swear check")


            #NOTE: LIST COMMAND - lists "swear.words" variables
            else if arg 1 is "list":
                readDoc("swear-doc", "swearlist", player, "swear list", arg 2)


            else if player has permissions "op":
                #NOTE: LIST COMMAND - lists "swear.words" variables
                if arg 1 is "devlist":
                    readDoc("swear-doc", "swearlistdev", player, "swear devlist", arg 2)


                #NOTE: RELOAD COMMAND
                else if arg 1 is "reload":
                    unload yaml "swear"
                    load yaml "plugins/Skript/yaml/swear.yml" as "swear"
                    swearList()

                    loop {doc::*}:
                        send "&7%loop-index%: %loop-value%"
                    delete {doc::*}

                    send "&aReloaded Swear!"
            else:
                send {sys::error}
            

        #NOTE: INAVLID COMMAND
        else:
            send {sys::error}


on tab complete of "/swear":
    player has permissions "staff"
    set tab completions for position 1 to "help", "check", "list"
    player has permission "op"
    add "devlist", "reload" to tab completions



#TODO: Incomplete commands remake
# &cUnknown or incomplete command, see below for error
# ...wear check&c<--[HERE] (10 text preview)
# ...sh reasons&c<--[HERE]
