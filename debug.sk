options:
    benchmark: 0.0009999275207519531
    prev: 10
    dir: "plugins/Skript/yaml/"

on Skript start:
    load yaml "%{@dir}%/debug.yml" as "debug"
    set {profiler} to false
    set {profiler::task} to true
    set {profiler::proc} to true

on Skript stop:
    delete {profiler::*}

#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           FUNCTION
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#


#PROFILER
function profiler(p: text, f: text, t: text = "start"):
    {profiler} is true

    set {profiler::task::%{_p}%} to true
    set {profiler::task::%{_p}%::%{_f}%} to {profiler::task::%{_p}%::%{_f}%} + 1
    
    if {_t} is "start":
        {proc} isn't set
        set {proc} to size of {profiler::proc::*} + 1

        add {_p} to {profiler::proc::*}
        set {profiler::proc::%{proc}%::1} to unix timestamp of now
    else if {_t} is "stop":
        set {profiler::proc::%{proc}%::1} to unix timestamp of now - {profiler::proc::%{proc}%::1}
        delete {proc}
        
        

#SNITCH - Gathers players permission to a list
function snitch(p: text) :: objects:
    if first 1 character of {_p} is "!":
        loop all players:
            add loop-player to {_return::*} if loop-player doesn't have permission "%{_p}%"

            profiler("snitch", "loop")
    else:
        loop all players:
            add loop-player to {_return::*} if loop-player has permission "%{_p}%"

            profiler("snitch", "loop")
    profiler("snitch", "profile", "stop")
    return {_return::*}


#PLAYER - Parses text as player
function player(p: text) :: offline player:
    loop all offline players:
        loop-offline player is {_p}
        return loop-offline player
        stop loop


#ERROR - Reports error @ position
function sendError(p: player, t: text):
    if length of {_t} > {@prev}:
        set {_t} to subtext of {_t} from characters (length of {_t} - {@prev}) to (length of {_t})
        set {_t} to "...%{_t}%"
    send "&cUknown or incomplete command, see below for error" to {_p}
    send "&7%{_t}%&c<--[HERE]" to {_p}

    

#REPLACE - Regex replace
function regexReplace(t: text, r: text, j: text) :: text:
    set {_t::*} to regex split {_t} at {_r}
    set {_t} to join {_t::*} with delimiter {_j}
    return {_t}


#TELLRAW - tellraw json builder
function tellraw(t: text, p: objects = "none") :: text:
    set {_m::t} to ",{""text"":"""
    set {_m::t::1} to """"
    set {_m::k} to ",{""keybind"":"""
    set {_m::k::1} to """"
    set {_m::o} to ",""clickEvent"":{""action"":""open_url"",""value"":"""
    set {_m::o::1} to """}"
    set {_m::r} to ",""clickEvent"":{""action"":""run_command"",""value"":"""
    set {_m::r::1} to """}"
    set {_m::s} to ",""clickEvent"":{""action"":""suggest_command"",""value"":"""
    set {_m::s::1} to """}"
    set {_m::c} to ",""clickEvent"":{""action"":""copy_to_clipboard"",""value"":"""
    set {_m::c::1} to """}"
    set {_m::h} to ",""hoverEvent"":{""action"":""show_text"",""contents"":["""
    set {_m::h::1} to """]}"

    #replace """" in {_t} with "\""\"""
    
    set {_x::*} to regex split {_t} at "(?<!\\)\|"

    
    add "[""""" to {_tellraw::*}
    loop {_x::*}:
        if loop-value-1 is not "":
        
            set {_z} to loop-value-1
            set {_z} to regexReplace({_z}, "(?<!\\)\$", "$⁎")
            set {_y::*} to regex split {_z} at "(?<!\\)\$"
            
            loop {_y::*}:
                #send loop-value-2 to all players #DEBUG
                set {_z} to loop-value-2
                replace "&" in {_z} with "§"
                replace "\|" in {_z} with "|"
                replace "\$" in {_z} with "$"
                
                if first character of {_z} is "⁎":
                    set {_i} to subtext of {_z} from characters 2 to 2
                    set {_z} to subtext of {_z} from characters 3 to (length of {_z})

                    if {_m::%{_i}%} is set:
                        add "%{_m::%{_i}%}%%{_z}%%{_m::%{_i}%::1}%" to {_tellraw::*}
                else:
                    add ",{""text"":""%{_z}%""" to {_tellraw::*}

                profiler("tellraw", "loop")
            #add ","""":""""}" to {_tellraw::*}
            add "}" to {_tellraw::*}
    add ",""""]" to {_tellraw::*}
    set {_tellraw} to join {_tellraw::*} with delimiter ""

    profiler("tellraw", "profile", "stop")
    if {_p} is not "none":
        #console command "/tellraw %{_p}% %{_tellraw}%"
        loop {_p::*}:
            console command "/tellraw %loop-value-1% %{_tellraw}%"

    return {_tellraw}


    #spaming |many reasons$$hHello| in hihihihihi
    #if this is mistake, |click here$$|
    #$t - text
    #$k - keybind
    #$u - open url
    #$r - run command
    #$s - suggest command
    #$c - copy to clipboard
    #$h - hover text


#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           COMMAND
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#


#DEBUG - reports time command 
command /debug [<text>]:
    permission: op
    trigger:
        set {_startTime} to unix timestamp of now

        make player execute command arg 1

        set {_endTime} to unix timestamp of now
        set {_Time} to {_endTime} - {_startTime}
        if {_Time} > {@benchmark}:
            send "&7Taken &c%{_Time}% &7seconds"
        else if {_Time} <= {@benchmark}:
            send "&7Taken &a%{_Time}% &7seconds"


#REGEX - matches given regex
command /regex [<text>] [<text>] [<text>]:
    description: devtool regex
    permission: op
    permission message: &cYou do not haver permissions to perform this command!
    trigger:

        #NOTE: REGEX
        arg 2 is set
        arg 3 is set
        if arg 1 is "match":
            if arg 3 matches arg 2:
                send "&e&lRegEx> &aMatched! &r%arg 2%"
            else:
                send "&e&lRegEx> &cNot Matched! &r%arg 2%"
        else if arg 1 is "split":
            send "&ctest"


#COLOR - Colored Messages
command /color [<text>]:
    description: devtool text color coding
    permission: staff
    permission message: &cYou do not haver permissions to perform this command!
    trigger:
        if arg 1 is set:
            set {_t} to arg 1
            replace "&" in {_t} with "§"
            send {_t}
        else:
            send "&c=================================="
            send "& 0 = §0Black              &f& 1 = §1Dark Blue"
            send "& 2 = §2Dark Green      &f& 3 = §3Dark Aqua"
            send "& 4 = §4Dark Red         &f& 5 = §5Dark Purple"
            send "& 6 = §6Gold               &f& 7 = §7Gray"
            send "& 8 = §8Dark Gray       &f& 9 = §9Blue"
            send "& a = §aGreen            &f& b = §bAqua"
            send "& c = §cRed               &f& d = §dLight Purple"
            send "& e = §eYellow            &f& f = §fWhite"
            send "&c=================================="
            send "& k = §k123               &f& l = §lBold"
            send "& m = §mStrikethrough&r  &f& n = §nUnderline"
            send "& o = §oItalics           &f& r = §rReset"
            send " "


#SNITCH - Print all players with perms
command /snitch [<text>]:
    description: devtool function snitch
    permission: op
    permission message: &cYou do not haver permissions to perform this command!
    trigger:
        if arg 1 is set:
            set {_r::*} to snitch(arg 1)
            send "&7Found: &c%{_r::*}%"


#TELLRAW
command /tellrawx [<text>]:
    description: Easy tellraw testing
    permission: op
    permission message: &cYou do not haver permissions to perform this command!
    trigger:
        if arg 1 is set:
            set {_t} to tellraw(arg 1, player)
            send "&7%unformatted {_t}%"


#COPY - Copies mainhand item
command /copy:
    permission: staff
    trigger:
        set {_nbt} to nbt compound of nbt of player's tool
        send {_nbt}
        if {_nbt} is "{serverBinding:1b}":
            send "&cThis item cannot be copied!"
        else:
            give player's tool to player
        
#HEAD - mc-heads db
command /head [<text>]:
    permission: staff
    trigger:
        if arg 1 is set:
            console command "give %player% minecraft:player_head{display:{Name:""{\""text\"":\""Skull Head\""}""},SkullOwner:{Id:[I;754602255,-947633604,-1613584887,-1061790114],Properties:{textures:[{Value:""%arg 1%""}]}}} 1"


#YAML CACHE
command /yaml [<text>] [<text>] [<text>]:
    permission: op
    trigger:
        if arg 1 is "list":
            set {_r::*} to loaded yaml files
            send "&7%{_r::*}%"

        else if arg 1 is "reload":
            unload yaml arg 2
            load yaml arg 2
            send "&aReloaded %arg 2%"
        
        else if arg 1 is "unload":
            unload yaml arg 2
            send "&cUnloaded %arg 2%"

        else if arg 1 is "node":
            arg 2 is set
            yamlLoad(arg 2)
            loop yaml node keys arg 3 from arg 2:
                tellraw("|&7%loop-val%$s/yaml value %arg-2% %arg-3%.%loop-val%|", player)

                #set {_r::*} to all yaml nodes of "%{@dir}%/%arg 2%"
                #send {_r::*}
        
        else if arg 1 is "value":
            arg 2 is set
            yamlLoad(arg 2)
            send "&7%yaml value arg 3 from arg 2%"

on tab complete of "/yaml":
    player has permissions "op"
    set tab completions for position 1 to "list", "unload", "reload", "node", "value"
    tab arg-1 is "reload" or "unload" or "node" or "value"
    set tab completions for position 2 to loaded yaml files


# PLAYTIME - MC Stat
command /playtime [<offlineplayer>]:
    trigger:
        if arg 1 is set:
            player has permissions "staff"
            send "&ePlaytime of &r%arg-1% &eis &r%time played of arg-1%"
        else:
            send "&eYour playtime is &r%time played of player%"


# PROFILE - Dump
command /profile [<text>]:
    permission: op
    trigger:
        if arg 1 is "dump":
            loop {profiler::task::*}:
                loop {profiler::task::%loop-index-1%::*}:
                    send "&3%loop-index-1% &6%loop-value-2% &3%loop-index-2%"
            loop {profiler::proc::*}:
                loop {profiler::proc::%loop-index%::*}:
                    set {_t} to "%loop-value-2% seconds" parsed as timespan
                    send "&3%loop-value-1% &6%loop-index-1% &3taken &6%{_t}%"
        else:
            set {profiler} to arg 1 parsed as boolean
            send "Profiling is set to %arg 1%"
        delete {profiler::task::*}
        delete {profiler::proc::*}

on tab complete of "/profile":
    player has permissions "op"
    set tab completions for position 1 to "dump", "true", "false"
    
#Cusom Item Creator / Validator

#Item extractor

#NOTE: Tellrawx - avoiding usage of skript-json 
#NOTE: regexReplace - avoiding usage of Tuske