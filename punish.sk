#TODO: Tolerance for spamming & swearing




#TODO: REASONS
# Chat
# Action / Behavior
# Exploit / Hack -ing
# Item
# Character / Player

#TODO: ACTION RANKING
# 4 - Permban
# 3 - Tempban
# 2 - Mute
# 1 - Detention
# 0 - Warn

#TODO: ACTION RATIO
# 100% - Perm
# 
#

#Punishments
# Detention 0-15m
# Mute 0-30m
# Tempban 1-12h
# Tempban 1-3d
#NOTE: Stack punishments

#Database - p@.*
# player::@punished::<cat>::<punish>.<len> -> time | reason
# staff::@staff::<cat>::<punish>.<len> -> time | reason

#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           PUNISH
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#

#options:
    #TODO: Tolerances

on Skript start:
    wait 5 ticks
    load yaml "plugins/Skript/yaml/punish.yml" as "punish"

    punishHelp()
    delete {doc::*}
    
on chat:
    set {_now} to unix timestamp of now
    set {_len} to metadata value "mute" of player
    if {_now} > {_len}:
        clear metadata value "mute" of player

    # Muted
    metadata value "mute" of player is set
    set {_len} to {_len} - {_now}
    set {_time} to "%{_len}% seconds" parsed as timespan
    send "&cYou are currently muted for &7%{_time}%"
    cancel event


#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           FUNCTION
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#

function formatTime(t: text) :: number:
    set {_x::*} to split {_t} by " "
    loop {_x::*}:
        set {_type} to last 1 character of loop-value
        set {_time} to subtext of loop-value from characters 1 to (length of loop-value - 1) parsed as number
        set {_time} to {_time} * 24 if {_type} is "d" # hours
        set {_time} to {_time} * 60 if {_type} is "h" or "d" # minutes
        set {_time} to {_time} * 60 # seconds
        set {_r} to {_r} + {_time}
    return {_r}
    


function punishHelp():
    set {_f} to "punish-doc"
    set {_d} to "reason"
    set {_h} to "head"
    set {_h2} to "subhead"
    set {_b} to "body"
    deleteDoc("punish-doc")
    loop yaml node keys "punish" from "punish":
        set {_count} to {_count} + 1
        wait 2 tick
    createDoc({_f}, {_d}, {_h}, "&4&m------------------------------")
    createDoc({_f}, {_d}, {_h}, "&c&l Punish Reasons &7[%{_count}%]")
    createDoc({_f}, {_d}, {_h}, " ")
    
    set {_prev} to "none"
    loop yaml node keys "punish" from "punish":
        set {_next::*} to yaml value "punish.%loop-val%" from "punish" split at " "
        if {_next::1} is not {_prev::1}:
            createDoc({_f}, {_d}, {_h2}, " &4&l%{_next::1} in strict proper case%", "body")
        set {_desc} to yaml value "description.%loop-val%" from "punish"
        createDoc({_f}, {_d}, {_b}, "&4&l > &r%{_desc}%")

        set {_prev::*} to yaml value "punish.%loop-val%" from "punish" split at " "
        wait 2 tick
    save yaml "punish-doc"


function punish(p1: player, p2: offline player, cat: text, reason: text, warn: text = "false"):
    loop yaml node keys "punish" from "punish":

        set {_p::*} to yaml value "punish.%loop-val%" from "punish" split at " "
        if {_p::2} is "none":
            set {_match} to loop-val
        else:
            set {_match} to {_p::2}

        {_cat} matches {_match}
        set {_day} to now formatted as "MM/dd/yyyy"

        #Reason Puller
        if {_reason} is not set:
            set {_reason::*} to yaml value "description.%loop-val%" from "punish" split at "$h"
            set {_reason} to subtext of {_reason::2} from characters 1 to (length of {_reason::2} - 1)

        #Temporary Punisher
        if {_p::3} is "mute":
            set metadata value "mute" of {_p2} to unix timestamp of now + formatTime({_p::4})
        else if {_p::3} is "ban":
            set {_time} to formatTime({_p::4})
            ban {_p2} due to "%{_cat}% | %{_reason}%" for "%{_time}% seconds" parsed as timespan
            ban {_p2} by IP due to "%{_cat}% | %{_reason}%" for "%{_time}% seconds" parsed as timespan
            kick {_p2} due to "You have been kicked for %{_cat}% | %{_reason}%"
        else if {_p::3} is "pardon":
            clear metadata value "mute" of {_p2}
            unban {_p2}
            unban {_p2} by IP








        # # Reverse Punishes
        # yamlLoad("punish/%{_p2}'s uuid%")
        # loop yaml node keys "player.%{_day}%" from "punish/%{_p2}'s uuid%":
        #     add loop-value-2 to {_x::*}
        # set {_x::*} to reversed {_x::*}


        # set {_prev} to unix timestamp of now
        # loop {_x::*}:
        #     # Time Calc
        #     set {_now} to loop-value-2 parsed as number
        #     set {_span} to abs({_now} - {_prev})
        #     set {_span} to {_span} / 60
        #     broadcast {_span}

        #     # Log Interpreter
        #     set {_z::*} to split yaml value "player.%{_day}%.%loop-value-2%" from "punish/%{_p2}'s uuid%" at " "
        #     set {_type} to last 1 character of {_z::4}
        #     set {_time} to subtext of {_z::4} from characters 1 to (length of {_z::4} - 1)
        #     set {_time} to {_time} * 60 if {_type} is "h"
        #     set {_time} to {_time} parsed as number * 2 if {_type} is not "d"
            


        #     set {_prev} to loop-value-2 parsed as number
        #     stop loop if {_z::3} is "clear"
        # unload yaml "punish/%{_p2}'s uuid%"




        log "%now% %{_p1}%: %{_p2}% %{_cat}% %{_p::3}% %{_p::4}% >> %{_reason}%" to "punish.log"

        yamlLoad("punish/%{_p2}'s uuid%")
        set yaml value "player.%{_day}%.%round(unix timestamp of now)%" from "punish/%{_p2}'s uuid%" to "%{_p1}% %{_cat}% %{_p::3}% %{_p::4}%"
        save yaml "punish/%{_p2}'s uuid%"
        unload "punish/%{_p2}'s uuid%"

        yamlLoad("punish/%{_p1}'s uuid%")
        set yaml value "staff.%{_day}%.%round(unix timestamp of now)%" from "punish/%{_p1}'s uuid%" to "%{_p2}% %{_cat}% %{_p::3}% %{_p::4}%"
        save yaml "punish/%{_p1}'s uuid%"
        unload "punish/%{_p1}'s uuid%"
        
        #yaml log check - check last day for bans, limit to current day with mutes
        #yaml log add
        #enforce




        set {_player::*} to snitch("!staff")
        set {_staff::*} to snitch("staff")
        set {_desc} to yaml value "description.%loop-val%" from "punish"
        set {_desc} to "|&c%subtext of {_desc} from characters 2 to (length of {_desc})%"
        tellraw("&c⚠ &7Punished user &f%{_p2}% &7for %{_desc}% |&7%{_p::3}%$hTime is not informed|", {_player::*})
        tellraw("&c⚠ &7Punished user &f%{_p2}% &7for %{_desc}% &7time &c%{_p::3}% %{_p::4}% &7by &r%{_p1}%", {_staff::*})
        stop loop

            #short burst warnings: enforced
            #spread out: default enforcement


#function warn():
#    set {_null} to "none"

#function punish(p: player, act: text):
#    send {_act} to {_p}


#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           COMMAND
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#


#PUNISH
command /punish [<text>] [<text>] [<text>]:
    permission: staff
    permission message: &cYou do not haver permissions to perform this command!
    trigger:

        #NOTE: HELP COMMAND
        if arg 1 is "help":
            readDoc("punish", "help", player, "punish help", arg 2)
        else if arg 1 is not set:
            readDoc("punish", "help", player, "punish help", arg 2)


        #NOTE: PUNISH PLAYER
        else if offline players contains arg 1:
            if arg 2 is set:
                set {_p} to player(arg 1)
                punish(player, {_p}, arg 2, arg 3)
            else:
                sendError(player, "punish %arg 1%")


        #NOTE: REASONS
        else if arg 1 is "list":
            readDoc("punish-doc", "reason", player, "punish list", arg 2)


        #NOTE: RELOAD COMMAND
        else if arg 1 is "reload":
            if player has permissions "op":
                unload yaml "punish"
                load yaml "plugins/Skript/yaml/punish.yml" as "punish"

                deleteDoc("punish-doc")
                punishHelp()

                loop {doc::*}:
                    send "&7%loop-index%: %loop-value%"
                delete {doc::*}

                send "&aReloaded Punish!"
            else:
                send {sys::perms}
        
        #NOTE: INVALID COMMAND
        else:
            send {sys::error}


#PUNISH TAB COMPLETE
on tab complete of "/punish":
    set tab completions for position 1 to "help", "list", "reload", all players

    tab arg-1 is set
    loop yaml node keys "punish" of "punish":
        add loop-val to {_r::*} 
    set tab completions for position 2 to {_r::*}
        
    #clear tab completions


#WARN
# command /warn [<player>] [<text>] [<text>]:
#     permission: staff
#     permission message: &cYou do not haver permissions to perform this command!
#     trigger:
#         send "beta"


# #DETENTION
# command /detention [<player>] [<text>] [<text>]:
#     permission: faculty
#     permission message: &cYou do not haver permissions to perform this command!
#     trigger:
#         send "beta"


#FREEZE