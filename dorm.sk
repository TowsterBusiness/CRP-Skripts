#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           Dorm
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#

options:
    dir: "plugins/Skript/yaml/"

on Skript start:
    wait 5 ticks
    load yaml "plugins/Skript/yaml/dorm.yml" as "dorm"


on quit:
    wait 3 minutes
    player is offline
    set {_sign} to yaml value "room.%player's uuid%.sign" from "dorm"
    set {_door} to yaml value "room.%player's uuid%.door" from "dorm"
    set {_door} to stringLocation(location of {_door})
    set line 3 of {_sign} to ""
    set line 4 of {_sign} to ""

    delete yaml value "room.%player's uuid%" from "dorm"
    delete yaml value "door.%{_door}%" from "dorm"


# on Skript stop:
#     loop {dorm::room::*}:
#         set {_sign} to {dorm::room::%loop-index%::sign}
#         set line 3 of {_sign} to ""
#         set line 4 of {_sign} to ""
#         wait 2 ticks

#     # delete yaml value "room" from "dorm"
#     # delete yaml value "door" from "dorm"
            
#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           FUNCTION
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#


#RESERVE
on rightclick on sign:
    line 2 matches "Room\s\d+"
    set {_sign} to yaml value "room.%player's uuid%.sign" from "dorm"
    set {_status} to yaml value "room.%player's uuid%.status" from "dorm"

    #NOTE: Dorm Owner
    # sign control
    if location of event-block is location of {_sign}:
        if player is sneaking:
            make player execute command "/dorm reset"
        else if {_status} is "private":
            make player execute command "/dorm public"
        else if {_status} is "public":
            make player execute command "/dorm private"

    #NOTE: Other
    else:
        # room already reserved
        if line 3 is not "":
            send "&cThis room is already reserved by &f%line 3%&c!"
            play sound "block.anvil.land"
        # attempt multiple reservations
        else if yaml value "room.%player's uuid%" from "dorm" is set:
            send "&cYou've previously reserved &r%line 2 of {_sign}%&c!"
            play sound "block.anvil.land"
        # dorm reservation
        else:
            line 3 is ""
            dormOwner(player, event-block)


#DOOR LOOKUP
function dormOwner(p: player, block: block):
    # sign pos offset to door
    # yaw -180
    send yaw of location of {_block} to {_p}
    if yaw of location of {_block} is 180:
        send "yaw180" to {_p}
        set {_v::1} to location of {_block} offset by vector(-1, -1, 1)
        set {_v::2} to location of {_block} offset by vector(1, -1, 1)
    # yaw 0
    else if yaw of location of {_block} is 0:
        send "yaw0" to {_p}
        set {_v::1} to location of {_block} offset by vector(-1, -1, -1)
        set {_v::2} to location of {_block} offset by vector(1, -1, -1)
    # yaw 90
    else if yaw of location of {_block} is 90: 
        send "yaw90" to {_p}
        set {_v::1} to location of {_block} offset by vector(1, -1, -1)
        set {_v::2} to location of {_block} offset by vector(1, -1, 1)
    # yaw -90
    else if yaw of location of {_block} is 270: 
        send "yaw270" to {_p}
        set {_v::1} to location of {_block} offset by vector(-1, -1, 1)
        set {_v::2} to location of {_block} offset by vector(-1, -1, -1)

    #send {_v::1} to {_p}
    #send {_v::2} to {_p}
    # door check
    if block at {_v::1} is dark oak door:
        set {_door} to {_v::1}
    else if block at {_v::2} is dark oak door:
        set {_door} to {_v::2}
    
    {_door} is set
    set {_xyz} to stringLocation({_door})
    send {_xyz} to {_p}

    send {_door} to {_p}
    set yaml value "room.%{_p}'s uuid%.yaw" from "dorm" to yaw of location of {_block}
    set yaml value "room.%{_p}'s uuid%.sign" from "dorm" to {_block}
    set yaml value "room.%{_p}'s uuid%.door" from "dorm" to block at {_door}
    set yaml value "room.%{_p}'s uuid%.status" from "dorm" to "private"
    set yaml value "door.%{_xyz}%" from "dorm" to {_p}'s uuid
    set yaml value "dorm.invite.%{_p}'s uuid%" from "player/%{_p}'s uuid%" to true

    set line 3 of {_block} to "&0%{_p}'s display name%"
    set line 4 of {_block} to "&4&l[Private]"
    send "&aYou have reserved &r%line 2 of {_block}%" to {_p}
    play sound "block.anvil.land" with pitch 2 to {_p}


    # set block 2 blocks behind {_block} to oak_wall_sign
    # set line 1 of block 2 blocks behind {_sign} to "-+-"
    # set line 2 of block 2 blocks behind {_sign} to "&c&l[Private Room]"
    # set line 3 of block 2 blocks behind {_sign} to "Keeping Players"
    # set line 4 oof block 2 blocks behind {_sign} to "Out"


function stringLocation(l: Location) :: string:
    set {_xyz} to "%X-coordinates of {_l}%%Y-coordinates of {_l}%%Z-coordinates of {_l}%"
    replace all "." with "" in {_xyz}
    return {_xyz}


on rightclick on dark oak door:
    # check door is owned
    set {_xyz} to stringLocation(event-block)
    if yaml value "door.%{_xyz}%" from "dorm" is not set:
        set {_xyz} to stringLocation(location of event-block offset by vector(0, -1, 0))
    set {_owner} to yaml value "door.%{_xyz}%" from "dorm"
    set {_block} to yaml value "room.%{_owner}%.door" from "dorm"

    {_owner} is set

    send {_xyz}
    send {_block}

    # check player is allowed in
    set {_allow} to doorAllow(player, {_xyz})
    {_allow} is set
    if {_allow} is false:
        cancel event

    # door is currently closed but after is opened
    {_allow} is true
    if block data tag "open" of {_block} is true:
        delete yaml value "check.%{_xyz}%" from "dorm"
    
    block data tag "open" of {_block} is false
    send "&aClosed -> Open"

    yaml value "check.%{_xyz}%" from "dorm" is not set
    set yaml value "check.%{_xyz}%" from "dorm" to true

    set {doorCheck::%{owner}%} to true
    while yaml value "check.%{_xyz}%" from "dorm" is set:
        loop all players within 1 blocks of {_block}:
            if {doorCheck::%{owner}%::%loop-player's uuid%} is false:
                teleport loop-player to block in front {_block}
                exit

            # transition - welcomed players
            if doorAllow(loop-player, {_xyz}) is true:
                set {doorCheck::%{owner}%::%loop-player's uuid%} to true
                yaml value "room.%{_owner}%.guest.%player's uuid%" from "dorm" is true
                delete yaml value "room.%{_owner}%.guest.%player's uuid%" from "dorm"
            # denied 
            else:
                set {doorCheck::%{_owner}%::%loop-player's uuid%} to false
                teleport loop-player to location of block in front {_block} offset by vector(0, -0.5, 0)
                send "&cDenied: %player's uuid%"
            wait 1 tick

        # loop all players at 1 block behind {_block}:
        #     # add to guest list
        #     if {doorCheck::%loop-player uuid%} is true:
        #         set yaml value "room.%{_owner}%.guest.%player's uuid%" from "dorm" to true
        #         send "&aAllowed: %player's uuid%"
        #     # denied again
        #     else:
        #         teleport loop-player to block in front {_block}

        wait 1 ticks

        # if 1 block behind and is allowed, add to guest
        # if 1 block infront and is guest, remove from guest
        # if between infront and in block check doorAllow()
        

    # if event-block closed stop loop remove from list
    # outside event on every 5 seconds check check list timestamp, if expired stop loop remove from list 
    # if event-block is open add to list 
on every 20 seconds:
    loop yaml node keys "check" from "dorm":
        set {_owner} to yaml value "door.%loop-val%" from "dorm"
        set {_block} to yaml value "room.%{_owner}%.door" from "dorm"
        set blockdata tag "open" of {_block} to false
        play sound "block.wooden_door.close" at {_block}
        delete yaml value "check.%loop-val%" from "dorm"
        delete {doorCheck::%{_owner}%::*}
        broadcast {_block}
        broadcast "&cClosed %loop-val%"
    




    # PERMISSION
    



function doorAllow(p: player, xyz: text) :: boolean:
    set {_owner} to yaml value "door.%{_xyz}%" from "dorm"
    set {_status} to yaml value "room.%{_owner}%.status" from "dorm"
    set {_invite} to yaml value "dorm.invite.%{_p}'s uuid%" from "player/%{_owner}%"
    # blacklisted
    if {_invite} is false:
        send "&cYou are not allowed to enter!" to {_p}
        set {_pass} to false
    # public room
    else if {_status} is "public":
        set {_pass} to true
    # invited
    else if {_invite} is true:
        set {_pass} to true
    # private room
    else if {_status} is "private":
        send "&cThis room is private!" to {_p}
        set {_pass} to false
    return {_pass}



#TODO: Staff remove players


#==========================================================================================================#
# -------------------------------------------------------------------------------------------------------- #
#                                           COMMAND
# -------------------------------------------------------------------------------------------------------- #
#==========================================================================================================#

command /dorm [<text>] [<text>]:
    trigger:
        #NOTE: HELP COMMAND
        if arg 1 is "help":
            send ""
        else if arg 1 is not set:
            send ""

        yaml value "room.%player's uuid%" from "dorm" is set
        set {_sign} to yaml value "room.%player's uuid%.sign" from "dorm"
        set {_door} to yaml value "room.%player's uuid%.door" from "dorm"
        set {_door} to location of {_door}
        #NOTE: INVITED | WHITELIST
        if arg 1 is "invite":
            players contains arg 2
            set {_target} to player(arg 2)
            set yaml value "dorm.invite.%{_target}'s uuid%" from "player/%player's uuid%" to true
            send "&aInvited %{_target}'s displayname% &ato your room"
            send "&aInvite from %player% to %line 2 of {_sign}%" to {_target}

        #NOTE: UNINVITE
        else if arg 1 is "uninvite":
            players contains arg 2
            set {_target} to player(arg 2)
            delete yaml value "dorm.invite.%{_target}'s uuid%" from "player/%player's uuid%"
            send "&cUninvited %{_target}'s displayname% &cto your room"
        

        #NOTE: BLACKLIST | BAN
        else if arg 1 is "remove":
            players contains arg 2
            set {_target} to player(arg 2)
            if {_target}'s uuid is player's uuid:
                send "&cYou cannot remove yourself!"
            else:
                set yaml value "dorm.invite.%{_target}'s uuid%" from "player/%player's uuid%" to false
                send "&cBlacklisted &r%{_target}'s displayname% &cfrom entering!"
        

        #NOTE: STATUS
        else if arg 1 is "private":
            set yaml value "room.%player's uuid%.status" from "dorm" to "private"
            set line 4 of {_sign} to "&4&l[Private]"
            # set line 2 of block 2 blocks behind {_sign} to "&c&l[Private Room]"
            # set line 3 of block 2 blocks behind {_sign} to "Keeping Players"
            # set line 4 oof block 2 blocks behind {_sign} to "Out"
            send "&eDorm made &cPrivate"
            play sound "block.lever.click" with pitch 0.5


        #NOTE: STATUS - public
        else if arg 1 is "public":
            set yaml value "room.%player's uuid%.status" from "dorm" to "public"
            set line 4 of {_sign} to "&a&l[Public]"
            # set line 2 of block 2 blocks behind {_sign} to "&a&l[Public Rooom]"
            # set line 3 of block 2 blocks behind {_sign} to "Allowing Players"
            # set line 4 of block 2 blocks behind {_sign} to "In"
            send "&eDorm made &aPublic"
            play sound "block.lever.click" with pitch 0.6


        #NOTE: RESET
        else if arg 1 is "reset":
            set line 3 of {_sign} to ""
            set line 4 of {_sign} to ""
            send "&cYou no longer have &r%line 2 of {_sign}%"
            play sound "block.anvil.land" with pitch 0

            delete yaml value "door.%stringLocation({_door})%" from "dorm"
            delete yaml value "room.%player's uuid%" from "dorm"


on tab complete of "/dorm":
    set tab completions for position 1 to "help", "private", "public", "invite", "uninvite", "remove", "reset"
    
    if tab arg-1 is "invite":
        set {_p} to true
    else if tab arg-1 is "uninvite":
        set {_p} to true
    else if tab arg-1 is "remove":
        set {_p} to true
    {_p} is set
    set tab completions for position 2 to all players

    